<!DOCTYPE html>
<!-- 宣告HTML5文件類型 -->
<html lang="zh-TW">
<!-- 設定網頁語言為繁體中文 -->
<head>
    <!-- 網頁頭部資訊開始 -->
    <meta charset="UTF-8">
    <!-- 設定字符編碼為UTF-8，支援繁體中文 -->
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- 設定響應式視口，讓網頁在手機上也能正常顯示 -->
    <title>一週待辦事項清單</title>
    <!-- 網頁標題 -->
    <style>
        /* CSS樣式開始 */
        
        /* 定義顏色變量 */
        :root {
            --primary-color: #4285f4;  /* 主要顏色(藍色) */
            --completed-color: #34a853; /* 完成任務顏色(綠色) */
            --delete-color: #ea4335;   /* 刪除按鈕顏色(紅色) */
            --hover-color: #3367d6;    /* 滑鼠懸停顏色(深藍色) */
        }
        
        /* 整體頁面樣式 */
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; /* 設定字體 */
            margin: 0;  /* 移除預設邊距 */
            padding: 20px;  /* 設定內邊距 */
            background-color: #f8f9fa;  /* 背景淺灰色 */
            color: #333;  /* 文字深灰色 */
        }
        
        /* 主容器樣式 */
        .container {
            max-width: 1200px;  /* 最大寬度限制 */
            margin: 0 auto;  /* 水平居中 */
            padding: 20px;  /* 內邊距 */
            background-color: white;  /* 白色背景 */
            border-radius: 10px;  /* 圓角 */
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);  /* 陰影效果 */
        }
        
        /* 標題樣式 */
        h1 {
            text-align: center;  /* 文字居中 */
            color: var(--primary-color);  /* 使用主要顏色 */
            margin-bottom: 30px;  /* 底部間距 */
            font-weight: 600;  /* 字體粗細 */
        }
        
        /* 週導航欄樣式 */
        .week-nav {
            display: flex;  /* 彈性佈局 */
            justify-content: space-between;  /* 兩端對齊 */
            align-items: center;  /* 垂直居中 */
            margin-bottom: 20px;  /* 底部間距 */
            padding: 10px 0;  /* 上下內邊距 */
            border-bottom: 1px solid #eee;  /* 底部邊框 */
        }
        
        /* 週標題樣式 */
        .week-title {
            font-size: 1.2rem;  /* 字體大小 */
            font-weight: 500;  /* 字體粗細 */
        }
        
        /* 導航按鈕樣式 */
        .nav-btn {
            background-color: var(--primary-color);  /* 使用主要顏色 */
            color: white;  /* 文字白色 */
            border: none;  /* 無邊框 */
            border-radius: 5px;  /* 圓角 */
            padding: 8px 15px;  /* 內邊距 */
            cursor: pointer;  /* 滑鼠指針樣式 */
            transition: background-color 0.3s;  /* 顏色過渡效果 */
        }
        
        /* 導航按鈕滑鼠懸停效果 */
        .nav-btn:hover {
            background-color: var(--hover-color);  /* 使用懸停顏色 */
        }
        
        /* 週網格容器樣式 */
        .week-grid {
            display: grid;  /* 網格佈局 */
            grid-template-columns: repeat(7, 1fr);  /* 7欄等寬 */
            gap: 15px;  /* 欄間距 */
        }
        
        /* 每日欄位樣式 */
        .day-column {
            background-color: #fff;  /* 白色背景 */
            border-radius: 8px;  /* 圓角 */
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);  /* 陰影效果 */
            overflow: hidden;  /* 隱藏溢出內容 */
        }
        
        /* 每日標題樣式 */
        .day-header {
            background-color: var(--primary-color);  /* 使用主要顏色 */
            color: white;  /* 文字白色 */
            padding: 12px;  /* 內邊距 */
            text-align: center;  /* 文字居中 */
            font-weight: 500;  /* 字體粗細 */
        }
        
        /* 日期顯示樣式 */
        .day-date {
            font-size: 0.8rem;  /* 較小字體 */
            opacity: 0.8;  /* 半透明效果 */
            margin-top: 3px;  /* 頂部間距 */
        }
        
        /* 任務列表樣式 */
        .task-list {
            padding: 10px;  /* 內邊距 */
            min-height: 150px;  /* 最小高度 */
        }
        
        /* 單個任務項目樣式 */
        .task-item {
            display: flex;  /* 彈性佈局 */
            align-items: center;  /* 垂直居中 */
            padding: 8px;  /* 內邊距 */
            margin-bottom: 8px;  /* 底部間距 */
            background-color: #f8f9fa;  /* 淺灰色背景 */
            border-radius: 5px;  /* 圓角 */
            transition: all 0.2s;  /* 過渡效果 */
        }
        
        /* 任務項目滑鼠懸停效果 */
        .task-item:hover {
            transform: translateY(-2px);  /* 輕微上移 */
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);  /* 陰影效果 */
        }
        
        /* 任務核取方塊樣式 */
        .task-checkbox {
            margin-right: 10px;  /* 右邊距 */
            cursor: pointer;  /* 滑鼠指針樣式 */
        }
        
        /* 任務文字樣式 */
        .task-text {
            flex-grow: 1;  /* 佔滿剩餘空間 */
            font-size: 0.95rem;  /* 字體大小 */
        }
        
        /* 已完成任務文字樣式 */
        .task-completed {
            text-decoration: line-through;  /* 刪除線 */
            color: #888;  /* 灰色文字 */
        }
        
        /* 任務操作按鈕容器樣式 */
        .task-actions {
            display: flex;  /* 彈性佈局 */
            gap: 5px;  /* 按鈕間距 */
        }
        
        /* 任務操作按鈕基礎樣式 */
        .task-btn {
            background: none;  /* 無背景 */
            border: none;  /* 無邊框 */
            cursor: pointer;  /* 滑鼠指針樣式 */
            font-size: 0.9rem;  /* 字體大小 */
            padding: 2px;  /* 內邊距 */
        }
        
        /* 完成按鈕樣式 */
        .complete-btn {
            color: var(--completed-color);  /* 使用完成顏色 */
        }
        
        /* 刪除按鈕樣式 */
        .delete-btn {
            color: var(--delete-color);  /* 使用刪除顏色 */
        }
        
        /* 添加任務區域樣式 */
        .add-task {
            display: flex;  /* 彈性佈局 */
            margin-top: 10px;  /* 頂部間距 */
            padding: 0 10px 10px;  /* 內邊距 */
        }
        
        /* 任務輸入框樣式 */
        .task-input {
            flex-grow: 1;  /* 佔滿剩餘空間 */
            padding: 8px;  /* 內邊距 */
            border: 1px solid #ddd;  /* 邊框 */
            border-radius: 5px;  /* 圓角 */
            margin-right: 5px;  /* 右邊距 */
            font-size: 0.9rem;  /* 字體大小 */
        }
        
        /* 添加按鈕樣式 */
        .add-btn {
            background-color: var(--primary-color);  /* 使用主要顏色 */
            color: white;  /* 文字白色 */
            border: none;  /* 無邊框 */
            border-radius: 5px;  /* 圓角 */
            padding: 8px 12px;  /* 內邊距 */
            cursor: pointer;  /* 滑鼠指針樣式 */
            transition: background-color 0.3s;  /* 顏色過渡效果 */
        }
        
        /* 添加按鈕滑鼠懸停效果 */
        .add-btn:hover {
            background-color: var(--hover-color);  /* 使用懸停顏色 */
        }
        
        /* 空白狀態提示樣式 */
        .empty-state {
            text-align: center;  /* 文字居中 */
            color: #888;  /* 灰色文字 */
            font-size: 0.9rem;  /* 字體大小 */
            padding: 20px 0;  /* 內邊距 */
        }
        
        /* 響應式設計 - 中等屏幕(900px以下) */
        @media (max-width: 900px) {
            .week-grid {
                grid-template-columns: repeat(4, 1fr);  /* 4欄等寬 */
            }
        }
        
        /* 響應式設計 - 小屏幕(600px以下) */
        @media (max-width: 600px) {
            .week-grid {
                grid-template-columns: repeat(2, 1fr);  /* 2欄等寬 */
            }
        }
        
        /* 響應式設計 - 超小屏幕(400px以下) */
        @media (max-width: 400px) {
            .week-grid {
                grid-template-columns: 1fr;  /* 1欄 */
            }
        }
    </style>
    <!-- CSS樣式結束 -->
</head>
<!-- 網頁頭部資訊結束 -->
<body>
    <!-- 網頁主體開始 -->
    <div class="container">
        <!-- 主容器開始 -->
        <h1>一週待辦事項清單</h1>
        <!-- 主標題 -->
        
        <div class="week-nav">
            <!-- 週導航欄開始 -->
            <button class="nav-btn" id="prevWeek">上一週</button>
            <!-- 上一週按鈕 -->
            <div class="week-title" id="weekTitle"></div>
            <!-- 週標題顯示區域 -->
            <button class="nav-btn" id="nextWeek">下一週</button>
            <!-- 下一週按鈕 -->
        </div>
        <!-- 週導航欄結束 -->
        
        <div class="week-grid" id="weekGrid">
            <!-- 週網格容器開始 -->
            <!-- 每天的內容將通過JavaScript動態生成 -->
        </div>
        <!-- 週網格容器結束 -->
    </div>
    <!-- 主容器結束 -->

    <script>
        // JavaScript代碼開始
        // 當DOM內容加載完成後執行
        document.addEventListener('DOMContentLoaded', function() {
            // 獲取DOM元素
            const weekGrid = document.getElementById('weekGrid');  // 週網格容器
            const weekTitle = document.getElementById('weekTitle');  // 週標題
            const prevWeekBtn = document.getElementById('prevWeek');  // 上一週按鈕
            const nextWeekBtn = document.getElementById('nextWeek');  // 下一週按鈕
            
            // 獲取當前週的開始日期（週一）
            let currentWeekStart = getMonday(new Date());
            
            // 初始渲染本週
            renderWeek(currentWeekStart);
            
            // 上一週按鈕點擊事件
            prevWeekBtn.addEventListener('click', function() {
                currentWeekStart.setDate(currentWeekStart.getDate() - 7);  // 日期減7天
                renderWeek(currentWeekStart);  // 重新渲染
            });
            
            // 下一週按鈕點擊事件
            nextWeekBtn.addEventListener('click', function() {
                currentWeekStart.setDate(currentWeekStart.getDate() + 7);  // 日期加7天
                renderWeek(currentWeekStart);  // 重新渲染
            });
            
            // 獲取某週的週一日期
            function getMonday(date) {
                const d = new Date(date);  // 創建新日期對象
                const day = d.getDay();  // 獲取星期幾(0-6, 0是週日)
                // 計算與週一的差值（如果是週日則減6天，否則減(day-1)天）
                const diff = d.getDate() - day + (day === 0 ? -6 : 1);
                return new Date(d.setDate(diff));  // 返回週一日期
            }
            
            // 格式化日期顯示
            function formatDate(date) {
                const options = { month: 'short', day: 'numeric' };  // 格式選項(簡寫月份+日)
                return date.toLocaleDateString('zh-TW', options);  // 轉為本地化日期字符串
            }
            
            // 獲取日期鍵（用於存儲）
            function getDateKey(date) {
                return date.toISOString().split('T')[0];  // 轉為ISO格式並取日期部分
            }
            
            // 從本地存儲獲取任務
            function getTasks() {
                // 從localStorage獲取或返回空對象
                return JSON.parse(localStorage.getItem('weeklyTasks')) || {};
            }
            
            // 保存任務到本地存儲
            function saveTasks(tasks) {
                localStorage.setItem('weeklyTasks', JSON.stringify(tasks));  // 轉為JSON字符串存儲
            }
            
            // 渲染整週
            function renderWeek(startDate) {
                // 設置週標題
                const endDate = new Date(startDate);  // 創建結束日期對象
                endDate.setDate(endDate.getDate() + 6);  // 加6天得到週日
                // 顯示日期範圍
                weekTitle.textContent = `${formatDate(startDate)} - ${formatDate(endDate)}`;
                
                // 清空週網格
                weekGrid.innerHTML = '';
                
                // 創建每天的列
                for (let i = 0; i < 7; i++) {
                    const currentDate = new Date(startDate);  // 創建當前日期對象
                    currentDate.setDate(currentDate.getDate() + i);  // 計算每天的日期
                    
                    const dayKey = getDateKey(currentDate);  // 獲取日期鍵
                    const tasks = getTasks();  // 獲取所有任務
                    const dayTasks = tasks[dayKey] || [];  // 獲取當天任務或空數組
                    
                    // 星期名稱數組
                    const dayNames = ['星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日'];
                    
                    // 創建每日列元素
                    const dayColumn = document.createElement('div');
                    dayColumn.className = 'day-column';
                    
                    // 創建每日標題
                    const dayHeader = document.createElement('div');
                    dayHeader.className = 'day-header';
                    dayHeader.innerHTML = `
                        ${dayNames[i]}  <!-- 星期名稱 -->
                        <div class="day-date">${formatDate(currentDate)}</div>  <!-- 格式化日期 -->
                    `;
                    
                    // 創建任務列表容器
                    const taskList = document.createElement('div');
                    taskList.className = 'task-list';
                    
                    // 如果沒有任務，顯示空白狀態提示
                    if (dayTasks.length === 0) {
                        const emptyState = document.createElement('div');
                        emptyState.className = 'empty-state';
                        emptyState.textContent = '暫無任務';
                        taskList.appendChild(emptyState);
                    } else {
                        // 添加所有任務到列表
                        dayTasks.forEach((task, index) => {
                            const taskItem = createTaskItem(dayKey, index, task.text, task.completed);
                            taskList.appendChild(taskItem);
                        });
                    }
                    
                    // 創建添加任務區域
                    const addTaskContainer = document.createElement('div');
                    addTaskContainer.className = 'add-task';
                    
                    // 創建任務輸入框
                    const taskInput = document.createElement('input');
                    taskInput.className = 'task-input';
                    taskInput.type = 'text';
                    taskInput.placeholder = '添加任務...';
                    
                    // 創建添加按鈕
                    const addBtn = document.createElement('button');
                    addBtn.className = 'add-btn';
                    addBtn.textContent = '添加';
                    
                    // 添加按鈕點擊事件
                    addBtn.addEventListener('click', function() {
                        addTask(dayKey, taskInput);  // 調用添加任務函數
                    });
                    
                    // 輸入框回車鍵事件
                    taskInput.addEventListener('keypress', function(e) {
                        if (e.key === 'Enter') {
                            addTask(dayKey, taskInput);  // 回車鍵也添加任務
                        }
                    });
                    
                    // 將元素添加到DOM
                    addTaskContainer.appendChild(taskInput);
                    addTaskContainer.appendChild(addBtn);
                    
                    dayColumn.appendChild(dayHeader);
                    dayColumn.appendChild(taskList);
                    dayColumn.appendChild(addTaskContainer);
                    
                    weekGrid.appendChild(dayColumn);
                }
            }
            
            // 添加任務函數
            function addTask(dayKey, inputElement) {
                const taskText = inputElement.value.trim();  // 獲取並清理輸入內容
                if (taskText) {  // 如果有內容
                    const tasks = getTasks();  // 獲取所有任務
                    
                    // 如果該日期還沒有任務數組，創建一個
                    if (!tasks[dayKey]) {
                        tasks[dayKey] = [];
                    }
                    
                    // 添加新任務到數組
                    tasks[dayKey].push({
                        text: taskText,  // 任務文字
                        completed: false  // 默認未完成
                    });
                    
                    saveTasks(tasks);  // 保存到本地存儲
                    renderWeek(currentWeekStart);  // 重新渲染
                    inputElement.value = '';  // 清空輸入框
                }
            }
            
            // 創建任務項函數
            function createTaskItem(dayKey, index, text, completed) {
                // 創建任務項容器
                const taskItem = document.createElement('div');
                taskItem.className = 'task-item';
                
                // 創建核取方塊
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.className = 'task-checkbox';
                checkbox.checked = completed;
                
                // 創建任務文字
                const taskText = document.createElement('span');
                taskText.className = 'task-text' + (completed ? ' task-completed' : '');
                taskText.textContent = text;
                
                // 創建任務操作按鈕容器
                const taskActions = document.createElement('div');
                taskActions.className = 'task-actions';
                
                // 創建完成按鈕
                const completeBtn = document.createElement('button');
                completeBtn.className = 'task-btn complete-btn';
                completeBtn.innerHTML = '✓';
                
                // 創建刪除按鈕
                const deleteBtn = document.createElement('button');
                deleteBtn.className = 'task-btn delete-btn';
                deleteBtn.innerHTML = '✕';
                
                // 切換任務完成狀態函數
                function toggleComplete() {
                    const tasks = getTasks();  // 獲取所有任務
                    // 切換完成狀態
                    tasks[dayKey][index].completed = !tasks[dayKey][index].completed;
                    saveTasks(tasks);  // 保存
                    taskText.classList.toggle('task-completed');  // 切換樣式
                    checkbox.checked = tasks[dayKey][index].completed;  // 更新核取方塊
                }
                
                // 綁定事件
                checkbox.addEventListener('change', toggleComplete);
                completeBtn.addEventListener('click', toggleComplete);
                
                // 刪除任務
                deleteBtn.addEventListener('click', function() {
                    const tasks = getTasks();  // 獲取所有任務
                    tasks[dayKey].splice(index, 1);  // 從數組中刪除
                    saveTasks(tasks);  // 保存
                    renderWeek(currentWeekStart);  // 重新渲染
                });
                
                // 將元素添加到DOM
                taskActions.appendChild(completeBtn);
                taskActions.appendChild(deleteBtn);
                
                taskItem.appendChild(checkbox);
                taskItem.appendChild(taskText);
                taskItem.appendChild(taskActions);
                
                return taskItem;  // 返回創建的任務項
            }
        });
    </script>
    <!-- JavaScript代碼結束 -->
</body>
<!-- 網頁主體結束 -->
</html>
<!-- HTML結束 -->
