<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>一周待办事项清单</title>
    <style>
        :root {
            --primary-color: #4285f4;
            --completed-color: #34a853;
            --delete-color: #ea4335;
            --hover-color: #3367d6;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #f8f9fa;
            color: #333;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        }
        
        h1 {
            text-align: center;
            color: var(--primary-color);
            margin-bottom: 30px;
            font-weight: 600;
        }
        
        .week-nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding: 10px 0;
            border-bottom: 1px solid #eee;
        }
        
        .week-title {
            font-size: 1.2rem;
            font-weight: 500;
        }
        
        .nav-btn {
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 5px;
            padding: 8px 15px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        
        .nav-btn:hover {
            background-color: var(--hover-color);
        }
        
        .week-grid {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            gap: 15px;
        }
        
        .day-column {
            background-color: #fff;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }
        
        .day-header {
            background-color: var(--primary-color);
            color: white;
            padding: 12px;
            text-align: center;
            font-weight: 500;
        }
        
        .day-date {
            font-size: 0.8rem;
            opacity: 0.8;
            margin-top: 3px;
        }
        
        .task-list {
            padding: 10px;
            min-height: 150px;
        }
        
        .task-item {
            display: flex;
            align-items: center;
            padding: 8px;
            margin-bottom: 8px;
            background-color: #f8f9fa;
            border-radius: 5px;
            transition: all 0.2s;
        }
        
        .task-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
        }
        
        .task-checkbox {
            margin-right: 10px;
            cursor: pointer;
        }
        
        .task-text {
            flex-grow: 1;
            font-size: 0.95rem;
        }
        
        .task-completed {
            text-decoration: line-through;
            color: #888;
        }
        
        .task-actions {
            display: flex;
            gap: 5px;
        }
        
        .task-btn {
            background: none;
            border: none;
            cursor: pointer;
            font-size: 0.9rem;
            padding: 2px;
        }
        
        .complete-btn {
            color: var(--completed-color);
        }
        
        .delete-btn {
            color: var(--delete-color);
        }
        
        .add-task {
            display: flex;
            margin-top: 10px;
            padding: 0 10px 10px;
        }
        
        .task-input {
            flex-grow: 1;
            padding: 8px;
            border: 1px solid #ddd;
            border-radius: 5px;
            margin-right: 5px;
            font-size: 0.9rem;
        }
        
        .add-btn {
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 5px;
            padding: 8px 12px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        
        .add-btn:hover {
            background-color: var(--hover-color);
        }
        
        .empty-state {
            text-align: center;
            color: #888;
            font-size: 0.9rem;
            padding: 20px 0;
        }
        
        @media (max-width: 900px) {
            .week-grid {
                grid-template-columns: repeat(4, 1fr);
            }
        }
        
        @media (max-width: 600px) {
            .week-grid {
                grid-template-columns: repeat(2, 1fr);
            }
        }
        
        @media (max-width: 400px) {
            .week-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>一周待办事项清单</h1>
        
        <div class="week-nav">
            <button class="nav-btn" id="prevWeek">上一周</button>
            <div class="week-title" id="weekTitle"></div>
            <button class="nav-btn" id="nextWeek">下一周</button>
        </div>
        
        <div class="week-grid" id="weekGrid">
            <!-- 每天的内容将通过JavaScript动态生成 -->
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const weekGrid = document.getElementById('weekGrid');
            const weekTitle = document.getElementById('weekTitle');
            const prevWeekBtn = document.getElementById('prevWeek');
            const nextWeekBtn = document.getElementById('nextWeek');
            
            // 获取当前周的开始日期（周一）
            let currentWeekStart = getMonday(new Date());
            
            // 初始化显示
            renderWeek(currentWeekStart);
            
            // 上一周按钮点击事件
            prevWeekBtn.addEventListener('click', function() {
                currentWeekStart.setDate(currentWeekStart.getDate() - 7);
                renderWeek(currentWeekStart);
            });
            
            // 下一周按钮点击事件
            nextWeekBtn.addEventListener('click', function() {
                currentWeekStart.setDate(currentWeekStart.getDate() + 7);
                renderWeek(currentWeekStart);
            });
            
            // 获取某周的周一日期
            function getMonday(date) {
                const d = new Date(date);
                const day = d.getDay();
                const diff = d.getDate() - day + (day === 0 ? -6 : 1); // 调整周日的情况
                return new Date(d.setDate(diff));
            }
            
            // 格式化日期显示
            function formatDate(date) {
                const options = { month: 'short', day: 'numeric' };
                return date.toLocaleDateString('zh-CN', options);
            }
            
            // 获取日期键（用于存储）
            function getDateKey(date) {
                return date.toISOString().split('T')[0];
            }
            
            // 从本地存储获取任务
            function getTasks() {
                return JSON.parse(localStorage.getItem('weeklyTasks')) || {};
            }
            
            // 保存任务到本地存储
            function saveTasks(tasks) {
                localStorage.setItem('weeklyTasks', JSON.stringify(tasks));
            }
            
            // 渲染整周
            function renderWeek(startDate) {
                // 设置周标题
                const endDate = new Date(startDate);
                endDate.setDate(endDate.getDate() + 6);
                weekTitle.textContent = `${formatDate(startDate)} - ${formatDate(endDate)}`;
                
                // 清空周网格
                weekGrid.innerHTML = '';
                
                // 创建每天的列
                for (let i = 0; i < 7; i++) {
                    const currentDate = new Date(startDate);
                    currentDate.setDate(currentDate.getDate() + i);
                    
                    const dayKey = getDateKey(currentDate);
                    const tasks = getTasks();
                    const dayTasks = tasks[dayKey] || [];
                    
                    const dayNames = ['星期一', '星期二', '星期三', '星期四', '星期五', '星期六', '星期日'];
                    
                    const dayColumn = document.createElement('div');
                    dayColumn.className = 'day-column';
                    
                    const dayHeader = document.createElement('div');
                    dayHeader.className = 'day-header';
                    dayHeader.innerHTML = `
                        ${dayNames[i]}
                        <div class="day-date">${formatDate(currentDate)}</div>
                    `;
                    
                    const taskList = document.createElement('div');
                    taskList.className = 'task-list';
                    
                    if (dayTasks.length === 0) {
                        const emptyState = document.createElement('div');
                        emptyState.className = 'empty-state';
                        emptyState.textContent = '暂无任务';
                        taskList.appendChild(emptyState);
                    } else {
                        dayTasks.forEach((task, index) => {
                            const taskItem = createTaskItem(dayKey, index, task.text, task.completed);
                            taskList.appendChild(taskItem);
                        });
                    }
                    
                    const addTaskContainer = document.createElement('div');
                    addTaskContainer.className = 'add-task';
                    
                    const taskInput = document.createElement('input');
                    taskInput.className = 'task-input';
                    taskInput.type = 'text';
                    taskInput.placeholder = '添加任务...';
                    
                    const addBtn = document.createElement('button');
                    addBtn.className = 'add-btn';
                    addBtn.textContent = '添加';
                    
                    addBtn.addEventListener('click', function() {
                        addTask(dayKey, taskInput);
                    });
                    
                    taskInput.addEventListener('keypress', function(e) {
                        if (e.key === 'Enter') {
                            addTask(dayKey, taskInput);
                        }
                    });
                    
                    addTaskContainer.appendChild(taskInput);
                    addTaskContainer.appendChild(addBtn);
                    
                    dayColumn.appendChild(dayHeader);
                    dayColumn.appendChild(taskList);
                    dayColumn.appendChild(addTaskContainer);
                    
                    weekGrid.appendChild(dayColumn);
                }
            }
            
            // 添加任务
            function addTask(dayKey, inputElement) {
                const taskText = inputElement.value.trim();
                if (taskText) {
                    const tasks = getTasks();
                    
                    if (!tasks[dayKey]) {
                        tasks[dayKey] = [];
                    }
                    
                    tasks[dayKey].push({
                        text: taskText,
                        completed: false
                    });
                    
                    saveTasks(tasks);
                    renderWeek(currentWeekStart);
                    inputElement.value = '';
                }
            }
            
            // 创建任务项
            function createTaskItem(dayKey, index, text, completed) {
                const taskItem = document.createElement('div');
                taskItem.className = 'task-item';
                
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.className = 'task-checkbox';
                checkbox.checked = completed;
                
                const taskText = document.createElement('span');
                taskText.className = 'task-text' + (completed ? ' task-completed' : '');
                taskText.textContent = text;
                
                const taskActions = document.createElement('div');
                taskActions.className = 'task-actions';
                
                const completeBtn = document.createElement('button');
                completeBtn.className = 'task-btn complete-btn';
                completeBtn.innerHTML = '✓';
                
                const deleteBtn = document.createElement('button');
                deleteBtn.className = 'task-btn delete-btn';
                deleteBtn.innerHTML = '✕';
                
                // 完成任务
                function toggleComplete() {
                    const tasks = getTasks();
                    tasks[dayKey][index].completed = !tasks[dayKey][index].completed;
                    saveTasks(tasks);
                    taskText.classList.toggle('task-completed');
                    checkbox.checked = tasks[dayKey][index].completed;
                }
                
                checkbox.addEventListener('change', toggleComplete);
                completeBtn.addEventListener('click', toggleComplete);
                
                // 删除任务
                deleteBtn.addEventListener('click', function() {
                    const tasks = getTasks();
                    tasks[dayKey].splice(index, 1);
                    saveTasks(tasks);
                    renderWeek(currentWeekStart);
                });
                
                taskActions.appendChild(completeBtn);
                taskActions.appendChild(deleteBtn);
                
                taskItem.appendChild(checkbox);
                taskItem.appendChild(taskText);
                taskItem.appendChild(taskActions);
                
                return taskItem;
            }
        });
    </script>
</body>
</html>
